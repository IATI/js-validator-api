{
	"info": {
		"_postman_id": "f8276da3-7473-469e-ad31-2dbd6b7d46d9",
		"name": "js-validator-api-tests bugfix-branch",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13097277"
	},
	"item": [
		{
			"name": "Ping Tests",
			"item": [
				{
					"name": "GET /pvt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"Reponse body contains 'Private API.'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Private API.\");",
									"});",
									"pm.test(\"Reponse body contains 'Verison'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Version\");",
									"});",
									"pm.test(\"Reponse body contains 'IATI'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"IATI\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/pvt?name=IATI",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pvt"
							],
							"query": [
								{
									"key": "name",
									"value": "IATI"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /pub",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"Reponse body contains 'Public API.'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Public API.\");",
									"});",
									"pm.test(\"Reponse body contains 'Verison'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Version\");",
									"});",
									"pm.test(\"Reponse body contains 'IATI'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"IATI\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/pub?name=IATI",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub"
							],
							"query": [
								{
									"key": "name",
									"value": "IATI"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Basic Body Validation",
			"item": [
				{
					"name": "No Body Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () { pm.response.to.have.status(400); });",
									"pm.test(\"Reponse body contains 'error': 'No body'}\", function () {pm.response.to.have.body({",
									"  \"error\": \"No body\"",
									"})})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followAuthorizationHeader": false,
						"followOriginalHttpMethod": false,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/pub/validate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "No Body {}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () { pm.response.to.have.status(400); });",
									"pm.test(\"Reponse body contains {'error': 'No body'}\", function () {pm.response.to.have.body({",
									"  \"error\": \"No body\"",
									"})})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Array Body []",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () { pm.response.to.have.status(400); });",
									"pm.test(\"Reponse body contains {'error': 'Body must be an application/xml string'}\", function () {pm.response.to.have.body({",
									"  \"error\": \"Body must be an application/xml string\"",
									"})})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followAuthorizationHeader": false,
						"followOriginalHttpMethod": false,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[]",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Main Tests",
			"item": [
				{
					"name": "iati-org-XML-text-body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"valid value is true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(true);",
									"});",
									"pm.test(\"fileType value is iati-organisations\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-organisations');",
									"});",
									"pm.test(\"version is 2.02\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.02');",
									"});",
									"pm.test(\"Response contains no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followAuthorizationHeader": false,
						"followOriginalHttpMethod": false,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<iati-organisations version=\"2.02\" generated-datetime=\"2018-11-07T05:25:55+00:00\">\n    <iati-organisation last-updated-datetime=\"2018-11-07T05:25:55+00:00\" xml:lang=\"en\" default-currency=\"NPR\" xmlns:aidstream=\"http://example.org/aidstream/ns#\">\n        <organisation-identifier>NP-SWC-1234</organisation-identifier>\n        <name>\n            <narrative>Test Org Nepal</narrative>\n        </name>\n        <reporting-org type=\"24\" ref=\"NP-SWC-1234\">\n            <narrative>Test Org Nepal</narrative>\n        </reporting-org>\n    </iati-organisation>\n</iati-organisations>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "not-xml - 0.1.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () { pm.response.to.have.status(400); });",
									"pm.test(\"The file is not valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"orgIdPrefixFileName is ''\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.orgIdPrefixFileName).to.be.a('string').with.length(0);",
									"});",
									"pm.test(\"codelistCommitSha is ''\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.codelistCommitSha).to.be.a('string').with.length(0);",
									"});",
									"pm.test(\"rulesetCommitSha is ''\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.rulesetCommitSha).to.be.a('string').with.length(0);",
									"});",
									"pm.test(\"iatiVersion is ''\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.be.a('string').with.length(0);",
									"});",
									"pm.test(\"fileType is ''\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.be.a('string').with.length(0);",
									"});",
									"pm.test(\"Error id is equal to 0.1.1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('0.1.1');",
									"});",
									"pm.test(\"Raw feedback from the xml2js parser should be displayed in the error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.message))).to.include(\"Start tag expected, '<' not found\\n\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "not-xml.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "not-xml - 0.1.1 - showDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () { pm.response.to.have.status(400); });",
									"pm.test(\"The file is not valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"Error id is equal to 0.1.1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('0.1.1');",
									"});",
									"pm.test(\"Raw feedback from the xml2js parser should be displayed in the error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.message))).to.include(\"Start tag expected, '<' not found\\n\");",
									"});",
									"pm.test(\"Error object contains a details object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0]).to.have.property('details');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "not-xml.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?details=true&group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "details",
									"value": "true"
								},
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "xlsx-spreadsheet-with-extension - 0.1.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () { pm.response.to.have.status(400); });",
									"pm.test(\"The file is not valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"fileType value is ''\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('');",
									"});",
									"pm.test(\"Feedback message id is equal to 0.1.1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('0.1.1');",
									"});",
									"pm.test(\"Raw feedback from the xml2js parser should be displayed in the error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.message))).to.include(\"Start tag expected, '<' not found\\n\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "xlsx-spreadsheet-with-extension.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "broken-xml - expect 0.1.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () { pm.response.to.have.status(400); });",
									"pm.test(\"The file is not valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"fileType value is ''\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('');",
									"});",
									"pm.test(\"Feedback message id is equal to 0.1.1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('0.1.1');",
									"});",
									"pm.test(\"Raw feedback from the xml2js parser should be displayed in the error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.message))).to.include(\"Opening and ending tag mismatch: level1 line 2 and level2\\n\");",
									"});",
									"pm.test(\"Summary object should have 1 critical error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.summary.critical).to.eq(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "broken-xml.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-act-me-feedback-no-ns.xml- expect 0.3.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () { pm.response.to.have.status(422); });",
									"pm.test(\"The file is not valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"fileType value is iati-activities\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-activities');",
									"});",
									"pm.test(\"version is 2.03\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.03');",
									"});",
									"pm.test(\"File level error includes error with id 0.3.1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('0.3.1');",
									"});",
									"pm.test(\"Summary object should have 1 critical error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.summary.critical).to.eq(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-act-me-feedback-no-ns.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-act-line-br",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"The file is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(true);",
									"});",
									"pm.test(\"fileType value is iati-activities\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-activities');",
									"});",
									"pm.test(\"version is 2.03\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.03');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-act-line-br.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-act-schema-errors - expect 0.3.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () { pm.response.to.have.status(422); });",
									"pm.test(\"The file is not valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"fileType value is iati-activities\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-activities');",
									"});",
									"pm.test(\"version is 2.03\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.03');",
									"});",
									"pm.test(\"File level error includes error with id 0.3.1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('0.3.1');",
									"});",
									"pm.test(\"Summary object should have 1 critical error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.summary.critical).to.eq(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-act-schema-errors.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-act-schema-errors - expect 0.3.1 - showDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () { pm.response.to.have.status(422); });",
									"pm.test(\"The file is not valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"fileType value is iati-activities\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-activities');",
									"});",
									"pm.test(\"version is 2.03\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.03');",
									"});",
									"pm.test(\"File level error includes error with id 0.3.1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('0.3.1');",
									"});",
									"pm.test(\"Summary object should have 1 critical error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.summary.critical).to.eq(1);",
									"});",
									"pm.test(\"Error object contains a details object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0]).to.have.property('details');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-act-schema-errors.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?details=true&group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "details",
									"value": "true"
								},
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-org-schema-errors - expect 0.3.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () { pm.response.to.have.status(422); });",
									"pm.test(\"The file is not valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"fileType value is iati-organisations\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-organisations');",
									"});",
									"pm.test(\"version is 2.02\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.02');",
									"});",
									"pm.test(\"File level error includes error with id 0.3.1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('0.3.1');",
									"});",
									"pm.test(\"Summary object should have 1 critical error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.summary.critical).to.eq(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-org-schema-errors.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-act-root-only - expect 0.3.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () { pm.response.to.have.status(422); });",
									"pm.test(\"The file is not valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"fileType value is iati-activities\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-activities');",
									"});",
									"pm.test(\"version is 2.03\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.03');",
									"});",
									"pm.test(\"File level error includes error with id 0.3.1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('0.3.1');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-act-root-only.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-org-root-only - expect 0.3.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () { pm.response.to.have.status(422); });",
									"pm.test(\"The file is not valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"fileType value is iati-organisations\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-organisations');",
									"});",
									"pm.test(\"version is 2.03\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.03');",
									"});",
									"pm.test(\"File level error includes error with id 0.3.1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('0.3.1');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-org-root-only.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-act-xml-errors - expect 0.1.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () { pm.response.to.have.status(400); });",
									"pm.test(\"The file is not valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"Feedback message id is equal to 0.1.1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('0.1.1');",
									"});",
									"pm.test(\"Raw feedback from the xml2js parser should be displayed in the error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.message))).to.include(\"Opening and ending tag mismatch: reporting-org line 5 and not-reporting-org\\n\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-act-xml-errors.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-org-xml-errors - expect 0.1.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () { pm.response.to.have.status(400); });",
									"pm.test(\"The file is not valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"Feedback message id is equal to 0.1.1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('0.1.1');",
									"});",
									"pm.test(\"Raw feedback from the xml2js parser should be displayed in the error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.message))).to.include(\"Opening and ending tag mismatch: reporting-org line 13 and not-reporting-org\\n\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-org-xml-errors.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "xml-but-not-iati - expect 0.2.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () { pm.response.to.have.status(422); });",
									"pm.test(\"The file is not valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"fileType value is ''\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('');",
									"});",
									"pm.test(\"Feedback message id is equal to 0.2.1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('0.2.1');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"followOriginalHttpMethod": false,
						"followAuthorizationHeader": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "xml-but-not-iati.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-act-no-errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"The file is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(true);",
									"});",
									"pm.test(\"fileType value is iati-activities\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-activities');",
									"});",
									"pm.test(\"version is 2.03\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.03');",
									"});",
									"pm.test(\"rulesetCommitSha is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.rulesetCommitSha).to.be.a('string').with.length.greaterThan(0);",
									"});",
									"pm.test(\"codelistCommitSha is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.codelistCommitSha).to.be.a('string').with.length.greaterThan(0);",
									"});",
									"pm.test(\"orgIdPrefixFileName is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.orgIdPrefixFileName).to.be.a('string').with.length.greaterThan(0);",
									"});",
									"pm.test(\"No file level errors are present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.title))).to.not.include('file');",
									"});",
									"pm.test(\"Activities identifier is equal to AA-AAA-123456789-ABC123 and contains identifier error 1.14.8\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('1.14.8');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-act-no-errors.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-org-no-errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"The file is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(true);",
									"});",
									"pm.test(\"fileType value is iati-organisations\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-organisations');",
									"});",
									"pm.test(\"version is 2.02\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.02');",
									"});",
									"pm.test(\"rulesetCommitSha is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.rulesetCommitSha).to.be.a('string').with.length.greaterThan(0);",
									"});",
									"pm.test(\"codelistCommitSha is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.codelistCommitSha).to.be.a('string').with.length.greaterThan(0);",
									"});",
									"pm.test(\"orgIdPrefixFileName is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.orgIdPrefixFileName).to.be.a('string').with.length.greaterThan(0);",
									"});",
									"pm.test(\"Response contains no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql([]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-org-no-errors.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-act-codelist-basic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"valid value is true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(true);",
									"});",
									"pm.test(\"fileType value is iati-activities\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-activities');",
									"});",
									"pm.test(\"version is 2.03\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.03');",
									"});",
									"pm.test(\"No file level errors are present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.title))).to.not.include('file');",
									"});",
									"pm.test(\"There is a codelist error for OrganisationRole Codelist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => {",
									"        if ('codelist' in obj) {",
									"            return obj.codelist",
									"        }",
									"        return ''",
									"    })).to.be.an('array').that.includes('OrganisationRole');",
									"});",
									"pm.test(\"There is a codelist error for BudgetType Codelist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => {",
									"        if ('codelist' in obj) {",
									"            return obj.codelist",
									"        }",
									"        return ''",
									"    })).to.be.an('array').that.includes('BudgetType');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followAuthorizationHeader": false,
						"followOriginalHttpMethod": false,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-act-codelist-basic.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false&details=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								},
								{
									"key": "details",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-org-codelist-basic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"valid value is true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(true);",
									"});",
									"pm.test(\"fileType value is iati-organisations\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-organisations');",
									"});",
									"pm.test(\"version is 2.02\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.02');",
									"});",
									"pm.test(\"No file level errors are present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.title))).to.not.include('file');",
									"});",
									"pm.test(\"There is a codelist error for OrganisationType Codelist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => {",
									"        if ('codelist' in obj) {",
									"            return obj.codelist",
									"        }",
									"        return ''",
									"    })).to.be.an('array').that.includes('OrganisationType');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followAuthorizationHeader": false,
						"followOriginalHttpMethod": false,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-org-codelist-basic.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?details=true&group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "details",
									"value": "true"
								},
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-act-codelist-conditional",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"valid value is true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(true);",
									"});",
									"pm.test(\"fileType value is iati-activities\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-activities');",
									"});",
									"pm.test(\"version is 2.03\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.03');",
									"});",
									"pm.test(\"No file level errors are present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.title))).to.not.include('file');",
									"});",
									"pm.test(\"There is a codelist error for Region Codelist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => {",
									"        if ('codelist' in obj) {",
									"            return obj.codelist",
									"        }",
									"        return ''",
									"    })).to.be.an('array').that.includes('Region');",
									"});",
									"pm.test(\"There is a codelist error for AidType Codelist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => {",
									"        if ('codelist' in obj) {",
									"            return obj.codelist",
									"        }",
									"        return ''",
									"    })).to.be.an('array').that.includes('AidType');",
									"});",
									"pm.test(\"There is a codelist error for AidTypeVocabulary Codelist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => {",
									"        if ('codelist' in obj) {",
									"            return obj.codelist",
									"        }",
									"        return ''",
									"    })).to.be.an('array').that.includes('AidTypeVocabulary');",
									"});",
									"pm.test(\"There is a codelist error that references linked default codelist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => ({context: obj.context[0].text}))).to.be.an('array').that.deep.includes({ context: \"\\\"ZZA123\\\" is not a valid value for attribute @code, in element <recipient-region> and linked @vocabulary = 1\"});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followAuthorizationHeader": false,
						"followOriginalHttpMethod": false,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-act-codelist-conditional.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?details=true&group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "details",
									"value": "true"
								},
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "0.6.1_iati-act-no-errors-old-version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () { pm.response.to.have.status(422); });",
									"pm.test(\"valid value is false\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"fileType value is iati-activities\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-activities');",
									"});",
									"pm.test(\"version is 1.03\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('1.03');",
									"});",
									"pm.test(\"There is a file level error with id '0.6.1'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.be.an('array').that.includes('0.6.1');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followAuthorizationHeader": false,
						"followOriginalHttpMethod": false,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-act-no-errors-old-version.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "0.6.1_iati-org-no-errors-old-version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () { pm.response.to.have.status(422); });",
									"pm.test(\"valid value is false\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"fileType value is iati-organisations\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-organisations');",
									"});",
									"pm.test(\"version is 1.03\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('1.03');",
									"});",
									"pm.test(\"There is a file level error with id '0.6.1'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.be.an('array').that.includes('0.6.1');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followAuthorizationHeader": false,
						"followOriginalHttpMethod": false,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-org-no-errors-old-version.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-dup-activity-ids - expect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"valid value is true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(true);",
									"});",
									"pm.test(\"fileType value is iati-activities\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-activities');",
									"});",
									"pm.test(\"version is 2.03\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.03');",
									"});",
									"pm.test(\"There is an error with id '1.1.2'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.be.an('array').that.includes('1.1.2');",
									"});",
									"pm.test(\"Activities identifier is equal to AA-AAA-123456789-ABC123 and exists in error object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map((err) => err.identifier)).to.include('AA-AAA-123456789-ABC123');",
									"});",
									"pm.test(\"Duplicate Activities identifier is equal to AA-AAA-123456789-ABC123(2) and exists in error object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map((err) => err.identifier)).to.include('AA-AAA-123456789-ABC123(2)');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followAuthorizationHeader": false,
						"followOriginalHttpMethod": false,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-dup-activity-ids.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "multi-blank-activity-ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"valid value is true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(true);",
									"});",
									"pm.test(\"fileType value is iati-activities\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-activities');",
									"});",
									"pm.test(\"version is 2.03\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.03');",
									"});",
									"pm.test(\"There is an error with id '1.1.2'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.be.an('array').that.includes('1.1.2');",
									"});",
									"pm.test(\"An activities identifier equal to noIdentifier exists in the error array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map((err) => err.identifier)).to.include('noIdentifier');",
									"});",
									"pm.test(\"An activities identifier equal to noIdentifier(2) exists in the error array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map((err) => err.identifier)).to.include('noIdentifier(2)');",
									"});",
									"pm.test(\"noIdentifier(2) errors array includes a Codelist Error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.some((err) => (err.identifier === 'noIdentifier(2)' && err.codelist))).to.eq(true);",
									"});",
									"pm.test(\"noIdentifier(2) errors array includes a Ruleset Error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.some((err) => (err.identifier === 'noIdentifier(2)' &&  err.details.ruleName))).to.eq(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followAuthorizationHeader": false,
						"followOriginalHttpMethod": false,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "multi-blank-activity-ids.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false&details=true",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								},
								{
									"key": "details",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "multi-activity-one-with-errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
									"pm.test(\"valid value is true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(true);",
									"});",
									"pm.test(\"fileType value is iati-activities\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-activities');",
									"});",
									"pm.test(\"version is 2.03\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.03');",
									"});",
									"pm.test(\"No file level errors are present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.not.have.property('file');",
									"});",
									"pm.test(\"Only activities with errors are returned in the errors object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map((err) => err.identifier)).to.not.contain('US-GOV-1-A');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followAuthorizationHeader": false,
						"followOriginalHttpMethod": false,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "multi-activity-one-with-errors.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-act-title-no-narrative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () { pm.response.to.have.status(422); });",
									"pm.test(\"The file is not valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"fileType value is iati-activities\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-activities');",
									"});",
									"pm.test(\"A schema error is returned 0.3.1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('0.3.1');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-act-title-no-narrative.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-org-name-no-narrative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () { pm.response.to.have.status(422); });",
									"pm.test(\"The file is not valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"A schema error is returned 0.3.1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('0.3.1');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "iati-org-name-no-narrative.xml"
							}
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "iati-act-date-format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () { pm.response.to.have.status(422); });",
									"pm.test(\"The file is not valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.eql(false);",
									"});",
									"pm.test(\"fileType value is iati-activities\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-activities');",
									"});",
									"pm.test(\"A schema error is returned 0.3.1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('0.3.1');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<iati-activities generated-datetime=\"2014-19-10T07:15:37Z\" version=\"2.03\">\n    <iati-activity last-updated-datetime=\"2014-19-10T07:20:37Z\">\n        <iati-identifier>ACT-1</iati-identifier>\n        <reporting-org ref=\"AA-AAA-123456789\" type=\"40\" secondary-reporter=\"0\">\n            <narrative>Organisation name</narrative>\n            <narrative xml:lang=\"fr\">Nom de l'organisme</narrative>\n        </reporting-org>\n\n        <title>\n            <narrative>Activity title</narrative>\n            <narrative xml:lang=\"fr\">Titre de l'activité</narrative>\n            <narrative xml:lang=\"es\">Título de la actividad</narrative>\n        </title>\n        <description>\n        <narrative>Activity title</narrative>\n        </description>\n        <participating-org role=\"\">\n        </participating-org>\n        <activity-status code=\"\">\n        </activity-status>\n        <activity-date iso-date=\"2012-15-04\" type=\"1\"/>\n        <budget type=\"1\" status=\"1\">\n            <period-start iso-date=\"2014-15-01\" />\n            <period-end iso-date=\"2014-12-31\" />\n            <value currency=\"EUR\" value-date=\"2014-01-01\">3000</value>\n        </budget>\n\n        <fss extraction-date=\"2014-05-06\" priority=\"1\" phaseout-year=\"2016\">\n            <forecast year=\"2014\" value-date=\"2013-07-03\" currency=\"GBP\">10000</forecast>\n        </fss>\n    </iati-activity>\n</iati-activities>"
						},
						"url": {
							"raw": "{{baseURL}}/pub/validate?group=false",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pub",
								"validate"
							],
							"query": [
								{
									"key": "group",
									"value": "false"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Validation Report contains API version string\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.apiVersion).to.be.a('string').with.length.greaterThan(0);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Rule Specific Tests",
			"item": [
				{
					"name": "Activities",
					"item": [
						{
							"name": "iati-act-atLeastOne-error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Errors Array contains error id 6.11.1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('6.11.1');",
											"});",
											"pm.test(\"Errors contain a context Array with at least 1 string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.map(obj => (obj.context)).map((con) => con.text).length).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-act-atLeastOne-error.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pub/validate?details=true&group=false",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pub",
										"validate"
									],
									"query": [
										{
											"key": "details",
											"value": "true"
										},
										{
											"key": "group",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "iati-act-oneOrAll-error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Errors Array contains error id 4.1.1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('4.1.1');",
											"});",
											"pm.test(\"Errors contain a context Array with at least 1 string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.map(obj => (obj.context)).map((con) => con.text).length).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-act-oneOrAll-error.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pub/validate?group=false",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pub",
										"validate"
									],
									"query": [
										{
											"key": "group",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "iati-act-dateNow-error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Errors Array contains error id 11.1.1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('11.1.1');",
											"});",
											"pm.test(\"Errors contain a context Array with at least 1 string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.map(obj => (obj.context)).map((con) => con.text).length).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-act-dateNow-error.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pub/validate?group=false",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pub",
										"validate"
									],
									"query": [
										{
											"key": "group",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "iati-act-dateOrder-error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error Array contains error id 11.1.4, 11.1.2, 11.2.1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('11.1.4','11.1.2','11.2.1');",
											"});",
											"pm.test(\"Errors contain a context Array with at least 1 string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.map(obj => (obj.context)).map((con) => con.text).length).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-act-dateOrder-error.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pub/validate?group=false",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pub",
										"validate"
									],
									"query": [
										{
											"key": "group",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "iati-act-regexMatches-error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error Arracy contains error id 1.11.13\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('1.11.13');",
											"});",
											"pm.test(\"The 2 regexMatches errors contain a context Array with at least 1 string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.reduce((acc, obj) => {",
											"        if (obj.details.ruleName === 'regexMatches') {",
											"            return acc.concat(obj.context)",
											"        }",
											"        return acc",
											"    }, []).map((con) => con.text).length).to.be.greaterThan(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-act-regexMatches-error.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pub/validate?group=false&details=true",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pub",
										"validate"
									],
									"query": [
										{
											"key": "group",
											"value": "false"
										},
										{
											"key": "details",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "iati-act-noSpaces-error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Errors Array contains error id 1.11.1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('1.11.1');",
											"});",
											"pm.test(\"The 1 noSpaces error contain a context Array with at least 1 string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.reduce((acc, obj) => {",
											"        if (obj.details.ruleName === 'noSpaces') {",
											"            return acc.concat(obj.context)",
											"        }",
											"        return acc",
											"    }, []).map((con) => con.text).length).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-act-noSpaces-error.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pub/validate?details=true&group=false",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pub",
										"validate"
									],
									"query": [
										{
											"key": "details",
											"value": "true"
										},
										{
											"key": "group",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "iati-act-strictSum-error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error Array contains error id 3.4.2 twice\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.eql([ '3.4.2', '3.4.2' ]);",
											"});",
											"pm.test(\"The 2 strictSum errors contain a context Array with at least 1 string each\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.reduce((acc, obj) => {",
											"        if (obj.details.ruleName === 'strictSum') {",
											"            return acc.concat(obj.context)",
											"        }",
											"        return acc",
											"    }, []).map((con) => con.text).length).to.be.greaterThan(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-act-strictSum-error.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pub/validate?details=true&group=false",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pub",
										"validate"
									],
									"query": [
										{
											"key": "details",
											"value": "true"
										},
										{
											"key": "group",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "iati-act-unique-startsWith-error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error Array contains error ids 1.1.3 and 1.1.21\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.eql(['1.1.3', '1.1.21']);",
											"});",
											"pm.test(\"The 2 unique errors contain a context Array with at least 1 string each\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.reduce((acc, obj) => {",
											"        if (obj.details.ruleName === 'unique') {",
											"            return acc.concat(obj.context)",
											"        }",
											"        return acc",
											"    }, []).map((con) => con.text).length).to.be.greaterThan(0);",
											"});",
											"pm.test(\"The 2 startsWith errors contain a context Array with at least 1 string each\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.reduce((acc, obj) => {",
											"        if (obj.details.ruleName === 'startsWith') {",
											"            return acc.concat(obj.context)",
											"        }",
											"        return acc",
											"    }, []).map((con) => con.text).length).to.be.greaterThan(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-act-unique-startsWith-error.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pub/validate?details=true&group=false",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pub",
										"validate"
									],
									"query": [
										{
											"key": "details",
											"value": "true"
										},
										{
											"key": "group",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "iati-act-range-ifThen-error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error Array contains error id 12.2.1, 7.9.4, 2.2.1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.eql([ '7.9.4', '12.2.1', '2.2.1' ]);",
											"});",
											"pm.test(\"The 1 range error contain a context Array with at least 1 string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.reduce((acc, obj) => {",
											"        if (obj.details.ruleName === 'range') {",
											"            return acc.concat(obj.context)",
											"        }",
											"        return acc",
											"    }, []).map((con) => con.text).length).to.be.greaterThan(0);",
											"});",
											"pm.test(\"The 2 ifThen errors contain a context Array with at least 1 string each\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.reduce((acc, obj) => {",
											"        if (obj.details.ruleName === 'ifThen') {",
											"            return acc.concat(obj.context)",
											"        }",
											"        return acc",
											"    }, []).map((con) => con.text).length).to.be.greaterThan(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-act-range-ifThen-error.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pub/validate?details=true&group=false",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pub",
										"validate"
									],
									"query": [
										{
											"key": "details",
											"value": "true"
										},
										{
											"key": "group",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "iati-act-timeLimit-error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error Array contains error id 7.5.3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.eql([ '7.5.3' ]);",
											"});",
											"pm.test(\"The 1 timeLimit error contain a context Array with at least 1 string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.reduce((acc, obj) => {",
											"        if (obj.details.ruleName === 'timeLimit') {",
											"            return acc.concat(obj.context)",
											"        }",
											"        return acc",
											"    }, []).map((con) => con.text).length).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-act-timeLimit-error.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pub/validate?details=true&group=false",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pub",
										"validate"
									],
									"query": [
										{
											"key": "details",
											"value": "true"
										},
										{
											"key": "group",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "iati-act-noMoreThanOne-error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error Array contains error id 107.1.2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.include('107.1.2');",
											"});",
											"pm.test(\"The 1 noMoreThanOne error contain a context Array with at least 1 string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.reduce((acc, obj) => {",
											"        if (obj.details.ruleName === 'noMoreThanOne') {",
											"            return acc.concat(obj.context)",
											"        }",
											"        return acc",
											"    }, []).map((con) => con.text).length).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-act-noMoreThanOne-error.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pub/validate?details=true&group=false",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pub",
										"validate"
									],
									"query": [
										{
											"key": "details",
											"value": "true"
										},
										{
											"key": "group",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"fileType value is iati-activities\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-activities');",
									"});",
									"pm.test(\"version is 2.03\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.03');",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Organisations",
					"item": [
						{
							"name": "iati-org-betweenDates-error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Errors Array contains error id 11.3.1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.map(obj => (obj.id))).to.eql([ '11.3.1' ]);",
											"});",
											"pm.test(\"The 1 betweenDates error contain a context Array with at least 1 string\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.reduce((acc, obj) => {",
											"        if (obj.details.ruleName === 'betweenDates') {",
											"            return acc.concat(obj.context)",
											"        }",
											"        return acc",
											"    }, []).map((con) => con.text).length).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-org-betweenDates-error.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pub/validate?details=true&group=false",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pub",
										"validate"
									],
									"query": [
										{
											"key": "details",
											"value": "true"
										},
										{
											"key": "group",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"fileType value is iati-organisations\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.fileType).to.eql('iati-organisations');",
									"});",
									"pm.test(\"version is 2.02\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.iatiVersion).to.eql('2.02');",
									"});"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
							"pm.test(\"Validation Report contains API version\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.apiVersion).to.exist;",
							"});",
							"pm.test(\"The file is valid\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.valid).to.eql(true);",
							"});",
							"pm.test(\"No file level errors are present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.map((err) => err.identifier)).to.not.include('file');",
							"});",
							""
						]
					}
				}
			]
		},
		{
			"name": "Schema Validation",
			"item": [
				{
					"name": "Basic Body Validation Copy",
					"item": [
						{
							"name": "No Body Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () { pm.response.to.have.status(400); });",
											"pm.test(\"Reponse body contains 'error': 'No body'}\", function () {pm.response.to.have.body({",
											"  \"error\": \"No body\"",
											"})})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": false,
								"followOriginalHttpMethod": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseURL}}/pvt/validate-schema",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"validate-schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Body {}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () { pm.response.to.have.status(400); });",
											"pm.test(\"Reponse body contains {'error': 'No body'}\", function () {pm.response.to.have.body({",
											"  \"error\": \"No body\"",
											"})})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"followOriginalHttpMethod": false,
								"followAuthorizationHeader": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/validate-schema",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"validate-schema"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Array Body []",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () { pm.response.to.have.status(400); });",
											"pm.test(\"Reponse body contains {'error': 'Body must be an application/xml string'}\", function () {pm.response.to.have.body({",
											"  \"error\": \"Body must be an application/xml string\"",
											"})})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": false,
								"followOriginalHttpMethod": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[]",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/validate-schema",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"validate-schema"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "400 - Shouldn't be sent these files",
					"item": [
						{
							"name": "not-xml - 0.1.1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"followOriginalHttpMethod": false,
								"followAuthorizationHeader": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "not-xml.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/validate-schema",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"validate-schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "broken-xml - 0.1.1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"followOriginalHttpMethod": false,
								"followAuthorizationHeader": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "broken-xml.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/validate-schema",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"validate-schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "xml-but-not-iati - 0.2.1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"followOriginalHttpMethod": false,
								"followAuthorizationHeader": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "xml-but-not-iati.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/validate-schema",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"validate-schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "iati-act-no-errors-old-version - 0.6.1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followAuthorizationHeader": false,
								"followOriginalHttpMethod": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-act-no-errors-old-version.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/validate-schema",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"validate-schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "iati-org-no-errors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-org-no-errors.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/validate-schema",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"validate-schema"
									],
									"query": [
										{
											"key": "group",
											"value": "false",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Main Tests",
					"item": [
						{
							"name": "Schema Error - Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"pm.test(\"Your test name\", function () {",
											"    pm.expect(jsonData.valid).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<iati-activities version=\"2.03\">\n  <iati-activity>\n    <iati-identifier></iati-identifier>\n    <reporting-org ref=\"\" type=\"\">\n      <narrative></narrative>\n    </reporting-org>\n    <title>\n      <narrative>Activity with a schema validation error</narrative>\n    </title>\n    <description>\n      <narrative></narrative>\n    </description>\n    <participating-org role=\"\">\n    </participating-org>\n    <activity-status code=\"\">\n    </activity-status>\n    <activity-date type=\"\" iso-date=\"\">\n    </activity-date>\n  </iati-activity>\n</iati-activities>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/validate-schema",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"validate-schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "iati-act-no-errors - Valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The activity is valid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.valid).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-act-no-errors.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/validate-schema",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"validate-schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "iati-act-root-only - Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The file is not valid\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.valid).to.eql(false);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"followOriginalHttpMethod": false,
								"followAuthorizationHeader": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": "iati-act-root-only.xml"
									}
								},
								"url": {
									"raw": "{{baseURL}}/pvt/validate-schema",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"pvt",
										"validate-schema"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{keyValue}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "{{keyName}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}